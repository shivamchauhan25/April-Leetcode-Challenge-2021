Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

Solution:
C++:
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *save;
        if(head == NULL) return head;
        save = head;
        ListNode *tmp = NULL;
        while(save->next) {
            if(tmp) {
                tmp = tmp->next;
            }
            n--;
            if(n == 0) {
                tmp = head;
            }
            save = save->next;
        }
        if(tmp == NULL) {
            head = head->next;
            return head;
        }
        tmp->next = tmp->next->next;
        return head;
    }
};
