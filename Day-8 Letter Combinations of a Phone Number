Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

Solution:
C++:

class Solution {
public:
    void backtrack(string curr, int i) {
        if (i == m_digits.size()) {
            m_res.push_back(curr);
            return;
        }
        
        int curr_digit = m_digits[i] - '0';
        for (auto c : m_letters[curr_digit]) {
            backtrack(curr + c, i + 1);
        }
    }
    
    vector<string> letterCombinations(string digits) {
        if (digits.size() == 0) 
            return {};
        
        m_digits = digits;
        backtrack("", 0);
        return m_res;
    }
    
private:
    string m_digits;
    vector<string> m_res;
    vector<string> m_letters = { "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
};
