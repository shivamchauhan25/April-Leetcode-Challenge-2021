Critical Connections in a Network
There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections.

Solution:
C++:


class Solution {
    vector<vector<int>> ans;
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> g(n);
        
        for (auto& c : connections) {
            g[c[0]].push_back(c[1]);
            g[c[1]].push_back(c[0]);
        }
        
        vector<int> minDepth(n);
        
        dfs(g, minDepth, 0, -1, 1);
        
        return ans;
    }
    
    void dfs(vector<vector<int>>& g, vector<int>& minDepth, int cur, int prev, int depth) {
        minDepth[cur] = depth;
        
        for (auto n : g[cur]) {
            if (minDepth[n] == 0) {
                dfs(g, minDepth, n, cur, depth + 1);
            }
            
            if (n != prev) {
                minDepth[cur] = min(minDepth[cur], minDepth[n]);
            }
        }
        
        if (prev != -1 && minDepth[cur] == depth) {
            ans.push_back({cur, prev});
        }
    }
};
