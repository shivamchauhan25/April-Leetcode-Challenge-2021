Longest Valid Parentheses

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

Solution:
Python:

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        if len(s)==0:
            return 0
        char=[]
        problem=[]
        problem.append(-1)
        max_length=0
        for i in range(0,len(s)):
            if s[i]=="(":
                char.append(s[i])
                problem.append(i)
            else:
                if len(char)!=0 and char[len(char)-1]=="(":
                    char.pop()
                    problem.pop()
                    max_length=max(max_length,i-problem[len(problem)-1])
                else:
                    char.append(s[i])
                    problem.append(i)
        return max_length
