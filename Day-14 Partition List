Partition List

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

Solution:
C++:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        
        vector<int>v1,v2;
        ListNode* t=head;
        while(t){
            if(t->val<x)
                v1.push_back(t->val);
            else
                v2.push_back(t->val);
            t=t->next;
            
            
        }
        t=head;
        for(int i=0;i<v1.size();i++){
            t->val=v1[i];
            t=t->next;
            
            
            
        }
        for(int i=0;i<v2.size();i++){
            
            t->val=v2[i];
            t=t->next;
            
        }
        return head;
        
        
        
        
    }
};
